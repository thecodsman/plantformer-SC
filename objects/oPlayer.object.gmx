<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grv = 1.5;
wlkspd = 9;
acr = 2;
maxmntm = 20;
xspd = 0;
yspd = 0;
jp = 15;
fric = 1;
jumped = false;
grounded = false;
facing = 1;
seeds = 5;

walljumpable = false;

draw_xscale = 1;
draw_yscale = 1;

flowertype = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oPlayer</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Misc
if place_meeting(x+xspd,y,oWallJumpFlower) {
    while (!place_meeting(x+sign(xspd),y,oWallJumpFlower)){
        x+=sign(xspd);
    }
    yspd = 0;
    facing = oWallJumpFlower.image_xscale;
    walljumpable = true;
} else {
    walljumpable = false;
}

mask_index = sIdle;
image_xscale = sign(draw_xscale*facing);

// Movement
keyright = keyboard_check(ord("D"))
keyleft = keyboard_check(ord("A"))
keydown = keyboard_check(ord("S"))
keyjump = keyboard_check_pressed(vk_space)

if keyright {
    xspd += acr;
    if walljumpable == false {
        facing = 1;
    }
}
if keyleft {
    xspd -= acr;
    if walljumpable == false {
        facing = -1;
    }
}
if xspd &gt; 0 {
    xspd -= fric;
}
if xspd &lt; 0 {
    xspd += fric;
}
yspd -= grv;

if keyjump{
if walljumpable {
    while yspd &lt; jp {
        yspd += 1;
        grounded = false; 
    }
    xspd = 20 * oWallJumpFlower.image_xscale-1;
    draw_xscale = .5;
    draw_yscale = 1.5;
}
if grounded == true {
    while yspd &lt; jp{
        yspd += 1;
        grounded = false;
    }
    draw_xscale = .5;
    draw_yscale = 1.5;
    }
}
// Collision

if (place_meeting(x+xspd,y,Collision_Parent)){
    while (!place_meeting(x+sign(xspd),y,Collision_Parent)){
        x+=sign(xspd);
    };
    xspd = 0;
};

x += xspd;

if (place_meeting(x,y-yspd,Collision_Parent)){
    while (!place_meeting(x,y-sign(yspd),Collision_Parent)){
        y-=sign(yspd);
    }
    yspd = 0;
    grounded = true;
};
y -= yspd;

// Animation
if grounded == true{
    
    if xspd == 0 {
        sprite_index = sIdle;
        image_speed = 0.5;
    }
    
    if xspd &gt;= 1 {
        sprite_index = sRunning;
        image_speed = xspd * 0.02;
        if draw_xscale = 1 or draw_xscale = -1 {
            image_xscale = 1;
        }
    }
    if xspd &lt;= -1 {
        sprite_index = sRunning;
        image_speed = xspd * 0.02;
        if draw_xscale = 1 or draw_xscale = -1 {
            image_xscale = -1;
        }
    }
}

if yspd &gt;= 1 {
    sprite_index = sJump;
}
if yspd &lt;= -1 {
    sprite_index = sFalling;
}

// Flower Power
if keyboard_check_pressed(ord("Q")) and seeds &gt; 0{
    if flowertype == 0 and grounded == true { 
        instance_create(x+16*facing,y+16,oFlower)
    }
    if flowertype == 1 {
        instance_create(x+16*facing,y,oSeed)
    }
    seeds -= 1;
}
if keyboard_check_pressed(ord("F")) {
    instance_create(x,y,oWater)
}
if mouse_wheel_up() {
    flowertype += 1;
}
if mouse_wheel_down() {
    flowertype -= 1;
}
if flowertype == 2 {
    flowertype = 0;
}
if flowertype == -1 {
    flowertype = 1;
}
if keyboard_check(ord("1")){
    flowertype = 0;
}
if keyboard_check(ord("2")){
    flowertype = 1;
}
/*if keyboard_check(ord("3")){
    flowertype = 2;
} */
// Squash &amp; Stretch

draw_xscale = lerp(draw_xscale,1,.1)
draw_yscale = lerp(draw_yscale,1,.1)
if (place_meeting(x, y+1, Collision_Parent) and !place_meeting(x, yprevious+1, Collision_Parent)){
    draw_yscale = 0.75;
    draw_xscale = 1.25;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,x,y,draw_xscale*facing,draw_yscale,image_angle,image_blend,image_alpha);
draw_text(x,y-32,seeds);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
